import _ from 'lodash';
import {WHITE, BLACK, isInCheck} from '../models/Piece';
import createPiece, {createPieces} from './createPiece';
import {BISHOP} from './Bishop';
import {KNIGHT} from './Knight';
import {QUEEN} from './Queen';
import {ROOK} from './Rook';
import {KING} from './King';
import {PAWN} from './Pawn';
import GamePieces from '../models/GamePieces';

const {setup} = GamePieces;

function areGamePiecesEqual(gamePiecesA, gamePiecesB) {
  return _.isEqual(
    gamePiecesA.getAllInGame().map(piece => _.omit(piece, 'id')),
    gamePiecesB.getAllInGame().map(piece => _.omit(piece, 'id')),
  );
}

// TODO move to a different file before any tests run
expect.extend({
  toEqualGamePieces(received, argument) {
    const pass = areGamePiecesEqual(received, argument);
    if (pass) {
      return {
        message: () => `expected ${received} not to be equal to ${argument}`,
        pass: true,
      };
    } else {
      return {
        message: () => `expected ${JSON.stringify(received, null, 2)} to be equal to ${JSON.stringify(argument, null, 2)}`,
        pass: false,
      };
    }
  },
});

describe('GamePieces setup', () => {
  test('empty board', () => {
    const pieces = setup(`
      ........
      ........
      ........
      ........
      ........
      ........
      ........
      ........
    `);
    expect(pieces.getAllInGame()).toEqual([]);
  });

  test('incomplete', () => {
    const incomplete = () => {
      const pieces = setup(`
        p.......
        ........
        ........
        ........
        ........
        ........
        ........
        .......
      `);
    };
    expect(incomplete).toThrow();
  });

  test('bad symbol', () => {
    const bad = () => {
      const pieces = setup(`
        .p......
        ........
        ........
        ....Z...
        ........
        ........
        ........
        ........
      `);
    };
    expect(bad).toThrow();
  });

  test('pawns', () => {
    const pieces = setup(`
      p.......
      ........
      ........
      ........
      ........
      ........
      ........
      P.......
    `);
    const comparePieces = createPieces([
      {x: 0, y: 0, name: PAWN, color: WHITE},
      {x: 0, y: 7, name: PAWN, color: BLACK},
    ]);
    expect(pieces).toEqualGamePieces(new GamePieces(comparePieces));
  });

  test('white pieces', () => {
    const pieces = setup(`
      rnbkq...
      p.......
      ........
      ........
      ........
      ........
      ........
      ........
    `);
    const comparePieces = createPieces([
      {x: 0, y: 0, name: ROOK, color: WHITE},
      {x: 1, y: 0, name: KNIGHT, color: WHITE},
      {x: 2, y: 0, name: BISHOP, color: WHITE},
      {x: 3, y: 0, name: KING, color: WHITE},
      {x: 4, y: 0, name: QUEEN, color: WHITE},
      {x: 0, y: 1, name: PAWN, color: WHITE},
    ]);
    expect(pieces).toEqualGamePieces(new GamePieces(comparePieces));
  });

  test('black pieces', () => {
    const pieces = setup(`
      ........
      ........
      ........
      ........
      ........
      ........
      P.......
      RNBKQ...
    `);
    const comparePieces = createPieces([
      {x: 0, y: 6, name: PAWN, color: BLACK},
      {x: 0, y: 7, name: ROOK, color: BLACK},
      {x: 1, y: 7, name: KNIGHT, color: BLACK},
      {x: 2, y: 7, name: BISHOP, color: BLACK},
      {x: 3, y: 7, name: KING, color: BLACK},
      {x: 4, y: 7, name: QUEEN, color: BLACK},
    ]);
    expect(pieces).toEqualGamePieces(new GamePieces(comparePieces));
  });
});
